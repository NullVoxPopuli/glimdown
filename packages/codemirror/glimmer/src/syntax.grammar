@top Document { (entity | DoctypeDecl)* }

entity[@isGroup=Entity] {
  IfBlock |
  UnlessBlock |
  LetBlock |
  EachBlock |
  EachInBlock |
  RawHTMLBlock |
  Interpolation |
  UnknownBlock |
  Text |
  EntityReference |
  CharacterReference |
  InvalidEntity |
  Element |
  LongMoustacheComment |
  MoustacheComment |
  Comment |
  ProcessingInst |
  IncompleteCloseTag |
  MismatchedCloseTag |
  NoMatchCloseTag
}

IfBlock[group=Block] {
  IfBlockOpen (ElseBlock | entity)* IfBlockClose
}

UnlessBlock[group=Block] {
  UnlessBlockOpen (ElseBlock | entity)* UnlessBlockClose
}

LetBlock[group=Block] {
  LetBlockOpen (entity)* LetBlockClose
}

EachBlock[group=Block] {
  EachBlockOpen (ElseBlock | entity)* EachBlockClose
}

EachInBlock[group=Block] {
  EachInBlockOpen (ElseBlock | entity)* EachInBlockClose
}

Element {
  OpenScriptTag ScriptText (CloseScriptTag | missingCloseTag) |
  OpenStyleTag StyleText (CloseStyleTag | missingCloseTag) |
  OpenTextareaTag TextareaText (CloseTextareaTag | missingCloseTag) |
  OpenTag entity* (CloseTag | missingCloseTag) |
  SelfClosingTag
}

ScriptText[group="TextContent Entity"] { scriptText* }

StyleText[group="TextContent Entity"] { styleText* }

TextareaText[group="TextContent Entity"] { textareaText* }

Comment { commentStart commentContent* commentEnd }
LongMoustacheComment { longMoustacheCommentStart longMoustacheCommentContent* longMoustacheCommentEnd }
MoustacheComment { moustacheCommentStart moustacheCommentContent* moustacheCommentEnd }

@skip { space } {

  SExpression { 
      // CallExpression
      // | identifier
      // | Is 
      // | Pipe
      Argument
      //| String
      // | keywords
  }


  OpenTag[closedBy=CloseTag] {
    StartTag elementName attr* EndTag
  }

  SelfClosingTag {
    StartSelfClosingTag TagName attr* EndTag |
    StartTag elementName attr* SelfClosingEndTag
  }

  MismatchedCloseTag {
    MismatchedStartCloseTag elementName EndTag
  }

  NoMatchCloseTag[@name=CloseTag] {
    NoMatchStartCloseTag elementName EndTag
  }

  CloseTag[openedBy=OpenTag] {
    StartCloseTag elementName EndTag
  }

  OpenScriptTag[@name=OpenTag,closedBy=CloseTag] {
    StartScriptTag TagName attr* EndTag
  }

  CloseScriptTag[@name=CloseTag,openedBy=OpenTag] {
    StartCloseScriptTag TagName EndTag
  }

  OpenStyleTag[@name=OpenTag,closedBy=CloseTag] {
    StartStyleTag TagName attr* EndTag
  }

  CloseStyleTag[@name=CloseTag,openedBy=OpenTag] {
    StartCloseStyleTag TagName EndTag
  }

  OpenTextareaTag[@name=OpenTag,closedBy=CloseTag] {
    StartTextareaTag TagName attr* EndTag
  }

  CloseTextareaTag[@name=CloseTag,openedBy=OpenTag] {
    StartCloseTextareaTag TagName EndTag
  }

  attr {
    DirectlyInterpolatedAttribute |
    Directive |
    StyleAttribute |
    Attribute |
    Splattributes 

  }

  DirectlyInterpolatedAttribute {
    "{{" (DirectlyInterpolatedAttributeValue { identifier })? "}}"
  }

  Splattributes {
    "..." "attributes"
  }

  Directive {
    directiveStart
    ("|" Modifier)*
    (Is (AttributeValue | UnquotedAttributeValue))?
  }

  StyleAttribute {
    StyleAttributeName (Is (AttributeValue | UnquotedAttributeValue))?
  }


  Attribute {
    AttributeName
    ("|" Modifier)*
    (Is (AttributeValue | UnquotedAttributeValue))?
  }

  LetBlockOpen[group=BlockOpen,closedBy=LetBlockClose] {
    "{{" pfx<"#"> blk<"let"> LongExpression "}}"
  }
  
  LetBlockClose[group=BlockClose,openedBy=LetBlockOpen] {
    "{{" pfx<"/"> blk<"let"> "}}"
  }
  
  IfBlockOpen[group=BlockOpen,closedBy=IfBlockClose] {
    "{{" pfx<"#"> blk<"if"> LongExpression "}}"
  }
  
  IfBlockClose[group=BlockClose,openedBy=IfBlockOpen] {
    "{{" pfx<"/"> blk<"if"> "}}"
  }

  UnlessBlockOpen[group=BlockOpen,closedBy=UnlessBlockClose] {
    "{{" pfx<"#"> blk<"unless"> LongExpression "}}"
  }
  
  UnlessBlockClose[group=BlockClose,openedBy=UnlessBlockOpen] {
    "{{" pfx<"/"> blk<"unless"> "}}"
  }
  
  ElseBlock[group=BlockInline] {
    "{{" pfx<":">? blk<"else"> (kw<"if"> LongExpression)? "}}"
  }

  EachBlockOpen[group=BlockOpen,closedBy=EachBlockClose] {
    "{{" pfx<"#"> blk<"each">
    ShortExpression
    kw<"as">
    ShortExpression
    (
      ("(" LongExpression ")") |
      ("," Variable? ("(" LongExpression ")")?)
    )?
    "}}"
  }
  
  EachBlockClose[group=BlockClose,openedBy=EachBlockOpen] {
    "{{" pfx<"/"> blk<"each"> "}}"
  }

  EachInBlockOpen[group=BlockOpen,closedBy=EachInBlockClose] {
    "{{" pfx<"#"> blk<"each-in">
    ShortExpression
    kw<"as">
    ShortExpression
    (
      ("(" LongExpression ")") |
      ("," Variable? ("(" LongExpression ")")?)
    )?
    "}}"
  }
  
  EachInBlockClose[group=BlockClose,openedBy=EachInBlockOpen] {
    "{{" pfx<"/"> blk<"each-in"> "}}"
  }

  RawHTMLBlock[group=BlockInline] {
    "{{{" LongExpression "}}}"
  }

  UnknownBlock[group=BlockInline] {
    "{{"
    BlockPrefix
    BlockType
    UnknownBlockContent?
    "}}"
  }
  
  Interpolation {
    "{{" (LongExpression | SExpression) "}}"
  }
}

elementName {
  TagName |
  NamedBlock |
  ComponentName
}

dr<name, term> {
  dir[@name=Directive{name}] {
    dirName[@name=DirectiveName] { @extend<AttributeName, term> }
    ":"
    DirectiveTarget
  }
}

directiveStart {
  dr<"On", "on"> |
  dr<"Bind", "bind"> |
  dr<"Let", "let"> |
  dr<"Class", "class"> |
  dr<"Style", "style"> |
  dr<"Use", "use"> |
  dr<"Transition", "transition"> |
  dr<"In", "in"> |
  dr<"Out", "out"> |
  dr<"Animate", "animate">
}

AttributeValue {
  Interpolation |
  "\"" attributeValueContentDouble? "\"" |
  "\'" attributeValueContentSingle? "\'"
}

attributeValueContentDouble[@name=AttributeValueContent] {
  (attributeValueContentCharDouble | attributeValueContentEntity)+
}

attributeValueContentSingle[@name=AttributeValueContent] {
  (attributeValueContentCharSingle | attributeValueContentEntity)+
}

attributeValueContentEntity {
  EntityReference |
  CharacterReference |
  Interpolation |
  InvalidEntity
}

@context elementContext from "./html-tokens.js"

@external tokens scriptTokens from "./html-tokens.js" {
  scriptText
  StartCloseScriptTag[@name=StartCloseTag,closedBy=EndTag]
}

@external tokens styleTokens from "./html-tokens.js" {
  styleText
  StartCloseStyleTag[@name=StartCloseTag,closedBy=EndTag]
}

@external tokens textareaTokens from "./html-tokens.js" {
  textareaText
  StartCloseTextareaTag[@name=StartCloseTag,closedBy=EndTag]
}

@external tokens tagStart from "./html-tokens.js" {
  StartTag[closedBy="EndTag SelfClosingEndTag"],
  StartScriptTag[@name=StartTag,closedBy=EndTag],
  StartStyleTag[@name=StartTag,closedBy=EndTag],
  StartTextareaTag[@name=StartTag,closedBy=EndTag],
  StartSelfClosingTag[@name=StartTag,closedBy=EndTag],
  StartCloseTag[closedBy=EndTag],
  NoMatchStartCloseTag[@name=StartCloseTag,closedBy=EndTag]
  MismatchedStartCloseTag[@name=StartCloseTag,closedBy=EndTag],
  missingCloseTag,
  IncompleteCloseTag
}

@external tokens commentContent from "./tokens.js" {
  commentContent
}
@external tokens moustacheCommentContent from "./tokens.js" {
  moustacheCommentContent
}
@external tokens longMoustacheCommentContent from "./tokens.js" {
  longMoustacheCommentContent
}

@external tokens longExpression from "./tokens.js" {
  LongExpression
}

@external tokens shortExpression from "./tokens.js" {
  ShortExpression
}

kw<term> { @specialize[@name={term}]<identifier, term> }

pfx<type> { @extend[@name=BlockPrefix]<BlockPrefix, type> }

blk<type> { @specialize[@name=BlockType]<BlockType, type> }

@tokens {
  "\""[@name=DoubleQuote, openedBy="\"", closedBy="\""]
  "\'"[@name=SingleQuote, openedBy="\'", closedBy="\'"]
  
  "{"[closedBy="}"]
  "}"[openedBy="{"]
  "{{"[closedBy="}}"]
  "}}"[openedBy="{{"]
  "("[closedBy="("]
  ")"[openedBy=")"]
  "["[closedBy="]"]
  "]"[openedBy="["]
  
  "," "|" "..."
  
  space { (" " | "\t" | "\r" | "\n")+ }
  
  identifierChar { @asciiLetter | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | @digit)* }
  identifier { word }
  
  Variable { identifierChar (identifierChar | @digit | ".")* }

  BlockPrefix { "#" | "/" | ":" }
  BlockType { identifier }

  UnknownBlockContent { ![}]+ }

  @precedence { UnknownBlockContent space }

  commentStart { "<!--" }
  commentEnd { "-->" }

  longMoustacheCommentStart { "{{!--" }
  longMoustacheCommentEnd { "--}}" }
  moustacheCommentStart { "{{!" }
  moustacheCommentEnd { "}}" }

  EndTag[openedBy="StartTag StartCloseTag"] { "/"? ">" }
  SelfClosingEndTag[openedBy=StartTag] { "/>" }
  @precedence { SelfClosingEndTag, EndTag }

  tagNameStart {
    "_" |
    @asciiLowercase |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}]
  }

  componentNameStart {
    @asciiUppercase
  }

  nameChar {
    "_" |
    "-" |
    "." |
    @asciiLetter |
    @digit |
    $[\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D] |
    $[\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u{10000}-\u{EFFFF}] |
    $[\u00B7\u0300-\u036F\u203F-\u2040]
  }

  TagName { tagNameStart nameChar* }

  NamedBlock { ":" tagNameStart nameChar* }
  Argument { "@" identifier }
  Function { ~identifier }
  ComponentName { componentNameStart nameChar* }

  attributeChar { ![.\u0000-\u0020\u007F-\u009F"'>/=|:{\uFDD0-\uFDEF\uFFFE\uFFFF] }

  AttributeName { attributeChar+ }
  StyleAttributeName { "--" attributeChar+ }
  Modifier { attributeChar+ }
  DirectiveTarget { attributeChar+ }

  @precedence { StyleAttributeName AttributeName }

  UnquotedAttributeValue { ![ \t\n\r\u000C=<>"'`{] ![ \t\n\r\u000C=<>"'`]* }

  attributeValueContentCharDouble { !["&{] }

  attributeValueContentCharSingle { !['&{] }

  Is { "=" }

  EntityReference { "&" ![#; ]+ ";" }

  CharacterReference { "&#" ![; ]+ ";" }

  InvalidEntity { "&" }

  @precedence { CharacterReference, EntityReference, InvalidEntity }

  Text[group=TextContent] { ![<&{]+ }

  ProcessingInst { "<?" piContent }

  piContent { ![?] piContent | "?" piQuestion }
  piQuestion { ![>] piContent | ">" }

  DoctypeDecl { "<!" ("doctype" | "DOCTYPE") ![>]* ">" }

  @precedence { longMoustacheCommentStart, moustacheCommentStart } 
  @precedence { commentStart, ProcessingInst, DoctypeDecl }
}

@external propSource svelteHighlighting from "./highlight"
